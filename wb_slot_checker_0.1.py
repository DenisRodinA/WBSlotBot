import os
import sys
import time
import datetime

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException, ElementClickInterceptedException, 
    StaleElementReferenceException, WebDriverException, NoSuchElementException
)

def get_local_user_data_path():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º —Å–∫—Ä–∏–ø—Ç
    script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
    profile_path = os.path.join(script_dir, "MySeleniumProfile")
    
    if not os.path.exists(profile_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {profile_path}")
    
    return profile_path

def get_dates_by_weekdays(input_str, num_days=30):
    days_map = {
        "–ø–Ω": 0, "–≤—Ç": 1, "—Å—Ä": 2, "—á—Ç": 3,
        "–ø—Ç": 4, "—Å–±": 5, "–≤—Å": 6
    }

    weekdays_reverse = {v: k for k, v in days_map.items()}  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É

    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    selected_days = [
        days_map[day.strip().lower()]
        for day in input_str.split(",")
        if day.strip().lower() in days_map
    ]

    if not selected_days:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
        return []

    today = datetime.date.today()
    result = []

    for i in range(1, num_days + 1):
        date = today + datetime.timedelta(days=i)
        if date.weekday() in selected_days:
            day_num = date.day
            month_str = months[date.month]
            weekday_str = weekdays_reverse[date.weekday()]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '26 –∏—é–Ω—è, —á—Ç'
            formatted_date = f"{day_num} {month_str}, {weekday_str}"
            result.append(formatted_date)

    return result


class WBOrderFinder:
    def __init__(self, order_number, user_data_dir, profile_directory, driver_path, dates_list):
        self.order_number = order_number.strip()
        self.options = Options()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Chrome, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤—Ä—É—á–Ω—É—é
        self.options.add_argument(f"--user-data-dir={user_data_dir}")
        self.options.add_argument(f"--profile-directory={profile_directory}")

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self.options.add_argument("--start-maximized")
        self.options.add_argument("--disable-blink-features=AutomationControlled")

        # –ß—Ç–æ–±—ã –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        self.options.add_experimental_option("detach", True)

        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {profile_directory}")
            service = Service(driver_path)
            self.driver = webdriver.Chrome(service=service, options=self.options)
        except WebDriverException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebDriver: {e}")
            self.driver = None

        self.dates_list = dates_list    

    def open_page(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."""
        if not self.driver:
            print("üö´ –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
            return False

        print(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        self.driver.get(url)
        time.sleep(3)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if any(x in self.driver.current_url for x in ["login", "signin", "auth"]):
            print("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")
            input("‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
            self.driver.get(url)
            time.sleep(3)

            if any(x in self.driver.current_url for x in ["login", "signin", "auth"]):
                print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
                self.cleanup()
                return False
        return True

    def find_order_row(self):
        """–ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–∫–∞–∑–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        if not self.driver:
            print("üö´ –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞.")
            return False

        try:
            WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.XPATH, "//table"))
            )
        except TimeoutException:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.")
            return False

        print(f"üîé –ò—â–µ–º –∑–∞–∫–∞–∑: {self.order_number}")

        scroll_attempts = 0
        while scroll_attempts < 10:
            rows = self.driver.find_elements(By.XPATH, "//table//tr")
            for row in rows:
                cells = row.find_elements(By.TAG_NAME, "td")
                for cell in cells:
                    if cell.text.strip().replace(" ", "") == self.order_number.replace(" ", ""):
                        print("\n‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!\n" + "-" * 40)
                        print(row.text)
                        print("-" * 40)

                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", row)
                        time.sleep(0.5)

                        self.safe_click(row.find_element(By.XPATH, ".//td"), "—Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–∑–∞")
                        return True

            print(f"üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑, –ø–æ–ø—ã—Ç–∫–∞ {scroll_attempts + 1}")
            self.driver.execute_script("window.scrollBy(0, 600);")
            time.sleep(1)
            scroll_attempts += 1

        print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.")
        return False

    def get_overlapping_element(self, element):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥—Ä—É–≥–∏–º."""
        return self.driver.execute_script("""
            var elem = arguments[0];
            var rect = elem.getBoundingClientRect();
            var x = rect.left + rect.width / 2;
            var y = rect.top + rect.height / 2;
            return document.elementFromPoint(x, y);
        """, element)

    def safe_click(self, element, name="—ç–ª–µ–º–µ–Ω—Ç"):
        """–ö–ª–∏–∫–∞–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π."""
        try:
            element.click()
            print(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ '{name}' ‚Äî –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.")
        except ElementClickInterceptedException:
            print(f"‚ö†Ô∏è '{name}' –ø–µ—Ä–µ–∫—Ä—ã—Ç. –ü—Ä–æ–±—É–µ–º JS-–∫–ª–∏–∫.")
            try:
                self.driver.execute_script("arguments[0].click();", element)
                print(f"‚úÖ JS-–∫–ª–∏–∫ –ø–æ '{name}' –ø—Ä–æ—à—ë–ª.")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ '{name}': {e}")
        except StaleElementReferenceException:
            print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç '{name}' —É—Å—Ç–∞—Ä–µ–ª (stale).")

    def click_schedule_button(self):
        """–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É', –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞."""
        if not self.driver:
            print("üö´ –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ.")
            return

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É'...")
        try:
            button = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, "//button[.//span[text()='–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É']]"))
            )
        except TimeoutException:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            input("üü° –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
        time.sleep(0.5)

        overlapping_elem = self.get_overlapping_element(button)
        if overlapping_elem and overlapping_elem != button:
            print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º: <{overlapping_elem.tag_name}> —Å –∫–ª–∞—Å—Å–∞–º–∏ '{overlapping_elem.get_attribute('class')}'")
            try:
                self.driver.execute_script("arguments[0].style.display='none';", overlapping_elem)
                print("üßπ –ü–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–∫—Ä—ã—Ç.")
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:", e)
        else:
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.")

        self.safe_click(button, "–∫–Ω–æ–ø–∫–∞ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É'")

    def schedule_first_available_date(self, dates_list, timeout=15):
        wait = WebDriverWait(self.driver, timeout)
        actions = ActionChains(self.driver)

        for date_str in dates_list:
            try:
                wait.until(EC.presence_of_all_elements_located(
                    (By.CSS_SELECTOR, 'td[class*="Calendar-cell"]')
                ))
                cells = self.driver.find_elements(By.CSS_SELECTOR, 'td[class*="Calendar-cell"]')
                print(f"–ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫ —Å –¥–∞—Ç–∞–º–∏: {len(cells)} –¥–ª—è –¥–∞—Ç—ã {date_str}")

                found_cell = None
                for cell in cells:
                    try:
                        date_span = cell.find_element(By.CSS_SELECTOR, 'span[class*="Text--body-m-bold"]')
                        if date_span.text.strip() == date_str:
                            try:
                                cell.find_element(By.XPATH, './/span[contains(text(), "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")]')
                                print(f"‚ùå –î–∞—Ç–∞ '{date_str}' –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                                continue
                            except NoSuchElementException:
                                found_cell = cell
                                break
                    except NoSuchElementException:
                        continue

                if found_cell is None:
                    print(f"‚õî –î–∞—Ç–∞ {date_str} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    continue

                actions.move_to_element(found_cell).perform()
                print(f"üñ±Ô∏è –ù–∞–≤–µ–¥—ë–Ω –∫—É—Ä—Å–æ—Ä –Ω–∞ —è—á–µ–π–∫—É —Å –¥–∞—Ç–æ–π '{date_str}'")
                time.sleep(0.3)  # –î–∞—Ç—å popup'—É –ø—Ä–æ—è–≤–∏—Ç—å—Å—è

                # –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ
                choose_button = WebDriverWait(found_cell, timeout).until(
                    lambda el: el.find_element(By.XPATH, './/button[.//span[text()="–í—ã–±—Ä–∞—Ç—å"]]')
                )
                print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å' –ø–æ—è–≤–∏–ª–∞—Å—å")

                # –°–∫—Ä–æ–ª–ª + –ø–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", choose_button)
                time.sleep(0.2)

                try:
                    choose_button.click()
                    print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å' –Ω–∞–∂–∞—Ç–∞ (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫)")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}, –ø—Ä–æ–±—É–µ–º JS")
                    self.driver.execute_script("arguments[0].click();", choose_button)
                    print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å' –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ JS")

                # –ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å'
                schedule_button = wait.until(
                    EC.element_to_be_clickable((By.XPATH, '//button[.//span[text()="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"]]'))
                )
                schedule_button.click()
                print(f"üìÖ –î–∞—Ç–∞ '{date_str}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
                return True

            except (NoSuchElementException, TimeoutException) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã '{date_str}': {e}")
                continue
            except Exception as e:
                print(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∞—Ç–µ '{date_str}': {e}")
                continue

        print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–∑ –¥–∞—Ç.")
        return False
    
    def reload_page(self):
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        self.driver.refresh()
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    def cleanup(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä."""
        if self.driver:
            try:
                self.driver.quit()
                print("üö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
            except Exception:
                print("üîí –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ."""
        if not self.driver:
            print("üö´ WebDriver –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
            return

        try:
            if not self.open_page("https://seller.wildberries.ru/supplies-management/all-supplies"):
                return

            found = self.find_order_row()
            if not found:
                print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            attempt = 1
            while True:
                print(f"\nüîÅ –ü–æ–ø—ã—Ç–∫–∞ #{attempt}")
                self.click_schedule_button()

                try:
                    success = self.schedule_first_available_date(self.dates_list)
                    if success:
                        print("üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
                        break
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                except Exception as e:
                    print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

                self.reload_page()
                time.sleep(1)
                attempt += 1

        except TimeoutException:
            print("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
        except WebDriverException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ WebDriver: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.cleanup()



if __name__ == "__main__":
    try:
        order_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏: ").strip()
        weekdays_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–Ω, —Å—Ä, –ø—Ç): ").strip()

        matched_dates = get_dates_by_weekdays(weekdays_input)
        if matched_dates:
            print("\nüìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã:")
            for date in matched_dates:
                print("‚Äî", date)
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—ã.")

        user_data_path = get_local_user_data_path()
        profile = "Default"
        script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
        chromedriver_path = os.path.join(script_dir, "chromedriver-win64", "chromedriver.exe")
        
        dates_list = get_dates_by_weekdays(weekdays_input)

        bot = WBOrderFinder(order_number, user_data_path, profile, chromedriver_path, dates_list)
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ: {e}")

